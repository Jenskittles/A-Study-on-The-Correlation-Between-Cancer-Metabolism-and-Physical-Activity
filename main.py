# -*- coding: utf-8 -*-
"""Main.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Lwkh6MWsbwYmaBSI0PPNnjE9rzVGncIL
"""

!pip install cobra

from google.colab import drive
drive.mount('/content/drive')

from google.colab import files

# Upload the SBML file from your local machine to Colab
uploaded = files.upload()

import cobra

# Load the JSON file (adjust the path if using Google Drive)
json_file_path = '/content/Recon3D_GEMPRO.json'

# Load the model
recon3d_model = cobra.io.load_json_model(json_file_path)

# Verify the model has been loaded
print(recon3d_model.summary())

# Iterate through reactions and print IDs or names
print("Reactions present in Recon3D model:")
for reaction in recon3d_model.reactions:
    print(reaction.id)  # or print(reaction.name) for reaction names

# Iterate through metabolites and print IDs or names
print("Metabolites present in Recon3D model:")
for metabolite in recon3d_model.metabolites:
    print(metabolite.id)  # or print(metabolite.name) for metabolite names

# Perform Flux Balance Analysis (FBA)
solution = recon3d_model.optimize()

# Print the objective value (typically represents the growth rate or another objective function)
print("Objective value (growth rate or another objective function):", solution.objective_value)

!pip install pandas matplotlib

# List files in the current directory
import os
os.listdir('.')

# Step 1: Install COBRApy (if not already installed)
!pip install cobra

# Step 2: Import necessary libraries
from cobra.io import load_json_model
from google.colab import files

# Step 3: Upload the JSON model
uploaded = files.upload()

# Step 4: Load the model
model_path = list(uploaded.keys())[0]  # Get the uploaded file's name
model = load_json_model(model_path)

# Step 5: Define lactate-related reactions
lactate_reactions = ['LDH_L', 'LDH_D']  # Add any other lactate-related reactions if needed

# Step 6: Check for the presence of lactate-related reactions in the model
def check_reactions_in_model(model, reaction_ids):
    missing_reactions = []
    for reaction_id in reaction_ids:
        if reaction_id not in model.reactions:
            missing_reactions.append(reaction_id)
    return missing_reactions

missing_lactate_reactions = check_reactions_in_model(model, lactate_reactions)

# Print missing reactions
if missing_lactate_reactions:
    print(f"Missing lactate-related reactions: {missing_lactate_reactions}")
else:
    print("All lactate-related reactions are present in the model.")

# Step 7: Add missing reactions if necessary (example: adding LDH_L reaction)
from cobra import Reaction, Metabolite

if 'LDH_L' in missing_lactate_reactions:
    print("Adding missing LDH_L reaction...")
    ldh_l = Reaction('LDH_L')
    ldh_l.name = 'Lactate Dehydrogenase (L-lactate)'
    ldh_l.lower_bound = -1000.0  # reversible reaction
    ldh_l.upper_bound = 1000.0

    # Define metabolites involved in the reaction
    pyruvate = Metabolite('pyr_c', compartment='c')
    l_lactate = Metabolite('lac__L_c', compartment='c')
    nadh = Metabolite('nadh_c', compartment='c')
    nad = Metabolite('nad_c', compartment='c')

    # Define reaction stoichiometry
    ldh_l.add_metabolites({
        pyruvate: -1.0,
        nadh: -1.0,
        l_lactate: 1.0,
        nad: 1.0
    })

    # Add the reaction to the model
    model.add_reactions([ldh_l])
    print("Added LDH_L reaction")

if 'LDH_D' in missing_lactate_reactions:
    print("Adding missing LDH_D reaction...")
    ldh_d = Reaction('LDH_D')
    ldh_d.name = 'Lactate Dehydrogenase (D-lactate)'
    ldh_d.lower_bound = -1000.0  # reversible reaction
    ldh_d.upper_bound = 1000.0

    # Define metabolites involved in the reaction
    d_lactate = Metabolite('lac__D_c', compartment='c')

    # Define reaction stoichiometry
    ldh_d.add_metabolites({
        pyruvate: -1.0,
        nadh: -1.0,
        d_lactate: 1.0,
        nad: 1.0
    })

    # Add the reaction to the model
    model.add_reactions([ldh_d])
    print("Added LDH_D reaction")

# Step 8: Verify lactate production by performing FBA
solution = model.optimize()
print(f"Objective value after adding reactions: {solution.objective_value}")

# Print fluxes through lactate-related reactions
for reaction_id in lactate_reactions:
    if reaction_id in model.reactions:
        print(f"{reaction_id}: {solution.fluxes[reaction_id]}")

from google.colab import drive
drive.mount('/content/drive')

from cobra.io import read_sbml_model

# Path to your SBML file on Google Drive
sbml_path = '/content/drive/MyDrive/Colab Notebooks/MODEL1105100000_url.xml'

# Load the SBML model
recon3d_model = read_sbml_model(sbml_path)

print(recon3d_model)

[
    {
        "Metabolite_ID": "M1",
        "Metabolite_Name": "Lactate",
        "Baseline_Concentration": 1.0,
        "Post_Exercise_Concentration": 2.0,
        "Mean_Fold_Change": 2.0
    },
    {
        "Metabolite_ID": "M2",
        "Metabolite_Name": "Glucose",
        "Baseline_Concentration": 5.0,
        "Post_Exercise_Concentration": 4.5,
        "Mean_Fold_Change": 0.9
    }
]

